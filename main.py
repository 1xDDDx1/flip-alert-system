import requests
import json
import re
import time
import schedule
import os
import random
from datetime import datetime
from bs4 import BeautifulSoup
import logging

# Konfiguracja logowania
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Dane bota (z zmiennych ≈õrodowiskowych dla bezpiecze≈Ñstwa)
BOT_TOKEN = os.getenv("BOT_TOKEN", "7794097240:AAGxupktEGiQJW11JYqLHLh1IH9_qpmJ-GA")
CHAT_ID = os.getenv("CHAT_ID", "1824475841")

# Zaktualizowana baza cen referencyjnych - lipiec 2025
CENY_REFERENCYJNE = {
    # iPhone'y
    "iPhone 11": {
        "64GB": 500, "128GB": 600, "256GB": 650,
        "Pro 64GB": 700, "Pro 256GB": 800,
        "Pro Max 64GB": 800, "Pro Max 256GB": 850, "Pro Max 512GB": 900
    },
    "iPhone 12": {
        "Mini 64GB": 500, "Mini 128GB": 600, "Mini 256GB": 700,
        "64GB": 700, "128GB": 800, "256GB": 900,
        "Pro 128GB": 900, "Pro 256GB": 1000, "Pro 512GB": 1100,
        "Pro Max 128GB": 1100, "Pro Max 256GB": 1200, "Pro Max 512GB": 1300
    },
    "iPhone 13": {
        "Mini 128GB": 900, "Mini 256GB": 1000,
        "128GB": 1150, "256GB": 1250, "512GB": 1300,
        "Pro 128GB": 1500, "Pro 256GB": 1600, "Pro 512GB": 1700,
        "Pro Max 128GB": 1700, "Pro Max 256GB": 1800, "Pro Max 512GB": 1900
    },
    "iPhone 14": {
        "128GB": 1400, "256GB": 1500, "512GB": 1600,
        "Plus 128GB": 1500, "Plus 256GB": 1600, "Plus 512GB": 1700,
        "Pro 128GB": 2000, "Pro 256GB": 2100, "Pro 512GB": 2200,
        "Pro Max 128GB": 2200, "Pro Max 256GB": 2300, "Pro Max 512GB": 2400
    },
    "iPhone 15": {
        "128GB": 1900, "256GB": 2000, "512GB": 2100,
        "Plus 128GB": 2200, "Plus 256GB": 2300, "Plus 512GB": 2400,
        "Pro 128GB": 2800, "Pro 256GB": 2900, "Pro 512GB": 3000,
        "Pro Max 256GB": 3200, "Pro Max 512GB": 3300
    },
    "iPhone 16": {
        "128GB": 2700, "256GB": 2800, "512GB": 2900,
        "Pro 256GB": 3500, "Pro 512GB": 3700,
        "Pro Max 256GB": 4200, "Pro Max 512GB": 4400
    },
    
    # Samsung Galaxy - ZAKTUALIZOWANE O NOWE MODELE
    "Samsung Galaxy S21": {
        "128GB": 800, "256GB": 900,
        "Ultra 128GB": 1200, "Ultra 256GB": 1300, "Ultra 512GB": 1400
    },
    "Samsung Galaxy S22": {
        "128GB": 1000, "256GB": 1100,
        "Ultra 128GB": 1600, "Ultra 256GB": 1700, "Ultra 512GB": 1800
    },
    "Samsung Galaxy S23": {
        "128GB": 1400, "256GB": 1500,
        "Ultra 256GB": 2200, "Ultra 512GB": 2300, "Ultra 1TB": 2600
    },
    "Samsung Galaxy S24": {
        "128GB": 1800, "256GB": 1900,
        "Plus 256GB": 2100, "Plus 512GB": 2200,
        "Ultra 256GB": 2600, "Ultra 512GB": 2700, "Ultra 1TB": 3000
    },
    
    # NOWE MODELE SAMSUNG S25 (2025) - ceny u≈ºywanych po 6 miesiƒÖcach
    "Samsung Galaxy S25": {
        "128GB": 2400, "256GB": 2500, "512GB": 2700
    },
    "Samsung Galaxy S25 Plus": {
        "256GB": 2800, "512GB": 3000
    },
    "Samsung Galaxy S25 Ultra": {
        "256GB": 3800, "512GB": 4000, "1TB": 4500
    },
    "Samsung Galaxy S25 Edge": {
        "256GB": 3200, "512GB": 3500
    },
    
    # Konsole - OGRANICZONE
    "PlayStation 5": {
        "Standard": 2200, "Digital": 1800
    },
    "Xbox Series X": {
        "Standard": 2000
    }
}

# Alternatywne nazwy produkt√≥w
ALTERNATYWNE_NAZWY = {
    "Samsung Galaxy S25": ["S25", "Galaxy S25", "Samsung S25"],
    "Samsung Galaxy S25 Plus": ["S25+", "S25 Plus", "Galaxy S25+", "Samsung S25+"],
    "Samsung Galaxy S25 Ultra": ["S25 Ultra", "Galaxy S25 Ultra", "Samsung S25 Ultra"],
    "Samsung Galaxy S25 Edge": ["S25 Edge", "Galaxy S25 Edge", "Samsung S25 Edge"],
    "PlayStation 5": ["PS5", "PlayStation 5", "Sony PS5", "Playstation 5"],
    "Xbox Series X": ["Xbox Series X", "Xbox X", "Series X", "Microsoft Xbox Series X"]
}

# S≈Çowa ostrzegawcze
SLOWA_OSTRZEGAWCZE = [
    "uszkodzony", "pƒôkniƒôty", "zablokowany", "icloud", "simlock", "cracked", 
    "broken", "damaged", "parts", "repair", "serwis", "nie dzia≈Ça", "wadliwy",
    "ghost touch", "martwy piksel", "spalony", "zalany", "po serwisie"
]

# Miasta wojew√≥dztwa ≈õlƒÖskiego - rozszerzone
MIASTA_SLASKIE = [
    "katowice", "czƒôstochowa", "sosnowiec", "gliwice", "zabrze", "bielsko-bia≈Ça",
    "bytom", "rybnik", "ruda ≈õlƒÖska", "tychy", "dƒÖbrowa g√≥rnicza", "chorz√≥w",
    "jaworzno", "jastrzƒôbie-zdr√≥j", "mys≈Çowice", "siemianowice ≈õlƒÖskie",
    "≈ºory", "≈õwiƒôtoch≈Çowice", "bƒôdzin", "tarnowskie g√≥ry", "piekary ≈õlƒÖskie",
    "czechowice-dziedzice", "wodzis≈Çaw ≈õlƒÖski", "zawiercie", "racib√≥rz",
    "cieszyn", "pszczyna", "miko≈Ç√≥w", "knur√≥w", "ustro≈Ñ", "wis≈Ça",
    "bieru≈Ñ", "lƒôdziny", "imielin", "bojszowy", "che≈Çm ≈õlƒÖski", "czelad≈∫",
    "kalety", "kozienice", "≈Çaziska g√≥rne", "marklowice", "miasteczko ≈õlƒÖskie",
    "ornontowice", "pyskowice", "radlin", "czerwionka-leszczyny", "god√≥w",
    "kobi√≥r", "paw≈Çowice", "wyry", "giera≈Çtowice", "pilchowice", "rudziniec",
    "so≈õnicowice", "≈õwierklany", "toszek", "wielowie≈õ", "zbros≈Çawice"
]

def wyslij_alert(wiadomosc):
    """Wysy≈Ça alert na Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    dane = {
        "chat_id": CHAT_ID,
        "text": wiadomosc,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=dane)
        if response.status_code == 200:
            logger.info("‚úÖ Alert wys≈Çany pomy≈õlnie")
            return True
        else:
            logger.error(f"‚ùå B≈ÇƒÖd wysy≈Çania alertu: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd po≈ÇƒÖczenia z Telegramem: {e}")
        return False

def analizuj_produkt(tytul, opis=""):
    """Analizuje tytu≈Ç i opis produktu"""
    tekst = (tytul + " " + opis).upper()
    
    # Znajd≈∫ typ produktu
    produkt_info = None
    
    # Sprawd≈∫ wszystkie modele
    for model in CENY_REFERENCYJNE:
        model_upper = model.upper()
        
        # Sprawd≈∫ dok≈Çadne dopasowanie
        if model_upper in tekst:
            produkt_info = {"typ": "Elektronika", "model": model}
            break
            
        # Sprawd≈∫ alternatywne nazwy
        if model in ALTERNATYWNE_NAZWY:
            for alt_nazwa in ALTERNATYWNE_NAZWY[model]:
                if alt_nazwa.upper() in tekst:
                    produkt_info = {"typ": "Elektronika", "model": model}
                    break
            if produkt_info:
                break
    
    if not produkt_info:
        return None
    
    # Znajd≈∫ wariant (pojemno≈õƒá, wersjƒô)
    wariant = None
    model_ceny = CENY_REFERENCYJNE[produkt_info["model"]]
    
    # Sprawd≈∫ wszystkie dostƒôpne warianty
    for wariant_klucz in model_ceny.keys():
        if wariant_klucz.upper() in tekst:
            wariant = wariant_klucz
            break
    
    # Je≈õli nie znaleziono wariantu, spr√≥buj wyodrƒôbniƒá pojemno≈õƒá
    if not wariant:
        for rozmiar in ["1TB", "512GB", "256GB", "128GB", "64GB"]:
            if rozmiar in tekst:
                for wariant_klucz in model_ceny.keys():
                    if rozmiar in wariant_klucz:
                        wariant = wariant_klucz
                        break
                if wariant:
                    break
    
    produkt_info["wariant"] = wariant
    produkt_info["cena_ref"] = model_ceny.get(wariant) if wariant else None
    
    return produkt_info

def ocen_ryzyko(cena, cena_ref, tytul, opis="", platforma=""):
    """Ocenia ryzyko oferty (1-5)"""
    ryzyko = 1
    
    # Ryzyko cenowe
    if not cena_ref:
        ryzyko += 1
    elif cena < cena_ref * 0.4:
        ryzyko += 3  # Bardzo niska cena - podejrzane
    elif cena < cena_ref * 0.6:
        ryzyko += 2  # Niska cena
    elif cena < cena_ref * 0.8:
        ryzyko += 1  # Umiarkowanie niska cena
    
    # Sprawd≈∫ s≈Çowa ostrzegawcze
    tekst = (tytul + " " + opis).upper()
    for slowo in SLOWA_OSTRZEGAWCZE:
        if slowo.upper() in tekst:
            ryzyko += 2
            break
    
    # Ryzyko platformy
    if platforma.lower() in ["facebook", "olx"]:
        ryzyko += 1  # Wiƒôksze ryzyko na platformach C2C
    
    return min(ryzyko, 5)

def jest_w_slaskim(lokalizacja):
    """Sprawdza czy lokalizacja jest w woj. ≈õlƒÖskim"""
    if not lokalizacja:
        return False
    
    lokalizacja_lower = lokalizacja.lower()
    
    # Sprawd≈∫ miasta
    for miasto in MIASTA_SLASKIE:
        if miasto in lokalizacja_lower:
            return True
    
    # Sprawd≈∫ wojew√≥dztwo
    return any(slowo in lokalizacja_lower for slowo in ["≈õlƒÖskie", "slask", "katowice", "silesia"])

def generuj_testowe_oferty():
    """Generuje testowe oferty do demonstracji"""
    logger.info("üîç Generowanie testowych ofert...")
    
    # Szablony ofert
    szablony_ofert = [
        ("iPhone 13 128GB Space Gray", 950, "Katowice", "Allegro"),
        ("Samsung Galaxy S25 256GB", 2300, "Gliwice", "Allegro"),
        ("PlayStation 5 Standard Edition", 1900, "Sosnowiec", "Facebook"),
        ("iPhone 14 Pro 256GB", 1800, "Bytom", "Facebook"),
        ("Xbox Series X", 1700, "Czƒôstochowa", "Facebook"),
        ("Samsung Galaxy S25 Ultra 512GB", 3600, "Zabrze", "Allegro"),
        ("iPhone 15 Pro Max 256GB", 2900, "Tychy", "Allegro"),
        ("Samsung Galaxy S24 Ultra 256GB", 2400, "Rybnik", "Facebook"),
        ("Samsung Galaxy S25 Edge 256GB", 3000, "Chorz√≥w", "Allegro"),
        ("PlayStation 5 Digital", 1600, "Jaworzno", "Facebook")
    ]
    
    # Wybierz losowe oferty
    oferty = []
    for szablon in random.sample(szablony_ofert, random.randint(4, 7)):
        tytul, cena_base, miasto, platforma = szablon
        
        # Dodaj losowƒÖ wariacjƒô ceny (+/- 15%)
        wariacja = random.uniform(0.85, 1.15)
        cena = int(cena_base * wariacja)
        
        oferty.append({
            "tytul": tytul,
            "cena": cena,
            "lokalizacja": miasto,
            "link": f"https://{platforma.lower()}.pl/oferta/{random.randint(10000, 99999)}",
            "platforma": platforma,
            "opis": f"Stan bardzo dobry. Telefon u≈ºywany przez {random.randint(6, 18)} miesiƒôcy."
        })
    
    return oferty

def przetworz_oferty(oferty):
    """Przetwarza oferty i zwraca dobre oferty"""
    dobre_oferty = []
    
    for oferta in oferty:
        try:
            # Sprawd≈∫ lokalizacjƒô
            if not jest_w_slaskim(oferta["lokalizacja"]):
                logger.info(f"‚è≠Ô∏è Pominiƒôto (lokalizacja): {oferta['tytul']} - {oferta['lokalizacja']}")
                continue
            
            # Analizuj produkt
            produkt = analizuj_produkt(oferta["tytul"], oferta.get("opis", ""))
            if not produkt:
                logger.info(f"‚è≠Ô∏è Pominiƒôto (nieznany produkt): {oferta['tytul']}")
                continue
            
            cena_ref = produkt["cena_ref"]
            if not cena_ref:
                logger.info(f"‚è≠Ô∏è Pominiƒôto (brak ceny ref): {oferta['tytul']}")
                continue
            
            ryzyko = ocen_ryzyko(
                oferta["cena"], 
                cena_ref, 
                oferta["tytul"], 
                oferta.get("opis", ""), 
                oferta["platforma"]
            )
            
            # Poka≈º analizƒô
            logger.info(f"üì± {oferta['tytul']}")
            logger.info(f"üí∞ Cena: {oferta['cena']} PLN | Ref: {cena_ref} PLN")
            logger.info(f"üéØ Pr√≥g (85%): {int(cena_ref * 0.85)} PLN")
            logger.info(f"üè™ Platforma: {oferta['platforma']}")
            logger.info(f"üìç Lokalizacja: {oferta['lokalizacja']}")
            logger.info(f"‚ö†Ô∏è Ryzyko: {ryzyko}/5")
            
            # Sprawd≈∫ czy to dobra oferta (cena ni≈ºsza o 15% od referencyjnej)
            if oferta["cena"] < cena_ref * 0.85:
                
                # Oblicz negocjacje
                min_neg = max(int(oferta["cena"] * 0.85), int(cena_ref * 0.75))
                max_neg = min(int(oferta["cena"] * 0.95), int(cena_ref * 0.85))
                oszczednosci = cena_ref - oferta["cena"]
                
                # Emoji dla platformy
                emoji_platforma = {
                    "Allegro": "üõí",
                    "Facebook": "üë•", 
                    "Inna": "üîç"
                }.get(oferta["platforma"], "üîç")
                
                alert = f"""üö® <b>ZNALEZIONA OFERTA!</b>

{emoji_platforma} <b>Platforma:</b> {oferta['platforma']}
üì± <b>{oferta['tytul']}</b>
üí∞ <b>Cena:</b> {oferta['cena']} PLN
üíé <b>Cena ref:</b> {cena_ref} PLN
üîã <b>Bateria:</b> Sprawd≈∫ w ofercie
üìç <b>Miasto:</b> {oferta['lokalizacja']}
‚ö†Ô∏è <b>Ryzyko:</b> {ryzyko}/5
üí° <b>Negocjacje:</b> {min_neg}-{max_neg} PLN
üîó <a href="{oferta['link']}">Link do oferty</a>

<i>üí∞ Oszczƒôdzisz: {oszczednosci} PLN!</i>"""
                
                dobre_oferty.append(alert)
                logger.info(f"‚úÖ DOBRA OFERTA! Oszczƒôdno≈õƒá: {oszczednosci} PLN")
            else:
                logger.info(f"‚è≠Ô∏è Cena za wysoka: {oferta['cena']} PLN > {int(cena_ref * 0.85)} PLN")
                
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd przetwarzania oferty: {e}")
            continue
    
    return dobre_oferty

def uruchom_skanowanie():
    """G≈Ç√≥wna funkcja skanowania"""
    try:
        logger.info("üöÄ Rozpoczynam skanowanie Multi-Platform Flip Alert")
        
        # Generuj testowe oferty (w przysz≈Ço≈õci zastƒÖpimy prawdziwymi API)
        oferty = generuj_testowe_oferty()
        logger.info(f"üìä Znaleziono {len(oferty)} ofert")
        
        # Przetw√≥rz oferty
        dobre_oferty = przetworz_oferty(oferty)
        
        # Wy≈õlij alerty
        if dobre_oferty:
            logger.info(f"üéâ Znaleziono {len(dobre_oferty)} dobrych ofert!")
            for i, alert in enumerate(dobre_oferty):
                wyslij_alert(alert)
                if i < len(dobre_oferty) - 1:  # Nie czekaj po ostatnim
                    time.sleep(3)
        else:
            logger.info("üòî Brak dobrych ofert w tym skanowaniu")
            wyslij_alert("üîç <b>Skanowanie zako≈Ñczone</b>\n\nüòî Brak dobrych ofert tym razem.\n\n‚è∞ Nastƒôpne skanowanie za godzinƒô...")
        
        # Wy≈õlij podsumowanie
        czas = datetime.now().strftime("%H:%M")
        summary = f"""üìä <b>Podsumowanie skanowania</b>

üïí <b>Czas:</b> {czas}
üîç <b>Przeskanowano:</b> {len(oferty)} ofert
‚úÖ <b>Znaleziono dobrych:</b> {len(dobre_oferty)} ofert
üè™ <b>Platformy:</b> Allegro, Facebook, Inne

‚è∞ <b>Nastƒôpne skanowanie:</b> za godzinƒô
üéØ <b>Status:</b> System aktywny 24/7 w chmurze

<i>Flip Alert dzia≈Ça! ‚òÅÔ∏èüöÄ</i>"""
        
        wyslij_alert(summary)
        logger.info("‚úÖ Skanowanie zako≈Ñczone pomy≈õlnie")
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd podczas skanowania: {e}")
        wyslij_alert(f"‚ùå <b>B≈ÇƒÖd systemu</b>\n\n{str(e)}\n\nüîß Restartujƒô za 5 minut...")

def main():
    """G≈Ç√≥wna funkcja aplikacji"""
    logger.info("üöÄ Multi-Platform Flip Alert uruchomiony w Railway!")
    
    # Wy≈õlij powiadomienie o uruchomieniu
    start_message = f"""üöÄ <b>Flip Alert w chmurze!</b>

‚úÖ System uruchomiony pomy≈õlnie na Railway
‚òÅÔ∏è Dzia≈Ça 24/7 automatycznie
üîÑ Skanowanie co godzinƒô
üìä Zaktualizowana baza cen (lipiec 2025)

üéØ <b>Monitorowane produkty:</b>
‚Ä¢ iPhone 11-16 (wszystkie wersje)
‚Ä¢ Samsung Galaxy S21-S25 (w tym S25 Edge!)
‚Ä¢ PlayStation 5 (Standard/Digital)
‚Ä¢ Xbox Series X

üìç <b>Obszar:</b> Wojew√≥dztwo ≈õlƒÖskie ({len(MIASTA_SLASKIE)} miast)
‚ö° <b>Status:</b> AKTYWNY

<i>Pierwsze skanowanie za 5 minut! üîî</i>"""
    
    wyslij_alert(start_message)
    
    # Pierwsze skanowanie za 5 minut
    logger.info("‚è∞ Pierwsze skanowanie za 5 minut...")
    time.sleep(300)
    uruchom_skanowanie()
    
    # Zaplanuj skanowanie co godzinƒô
    schedule.every().hour.do(uruchom_skanowanie)
    
    # Pƒôtla g≈Ç√≥wna
    logger.info("üîÑ Uruchomiono harmonogram skanowania co godzinƒô")
    while True:
        schedule.run_pending()
        time.sleep(60)  # Sprawdzaj co minutƒô

if __name__ == "__main__":
    main()
